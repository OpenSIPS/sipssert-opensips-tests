#
# OpenSIPS residential configuration script
#     by OpenSIPS Solutions <team@opensips-solutions.com>
#
# This script was generated via "make menuconfig", from
#   the "Residential" scenario.
# You can enable / disable more features / functionalities by
#   re-generating the scenario with different options.#
#
# Please refer to the Core CookBook at:
#      https://opensips.org/Resources/DocsCookbooks
# for a explanation of possible statements, functions and parameters.
#


####### Global Parameters #########
######################################################################
/* uncomment the following lines to enable debugging */
#debug_mode=yes

log_level=4
xlog_level=4
log_stderror=yes

udp_workers=4

####### Modules Section ########

#set module path
mpath="/usr/lib/x86_64-linux-gnu/opensips/modules/"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 0)

#### B2B modules
loadmodule "b2b_entities.so"
loadmodule "b2b_logic.so"
modparam("b2b_logic", "script_req_route", "b2b_logic_request")

loadmodule "proto_udp.so"

####### Routing Logic ########

# main request routing logic

route {

	if (!mf_process_maxfwd_header(10)) {
		send_reply(483,"Too Many Hops");
		exit;
	}

	if (has_totag()) {
		send_reply(481, "Call/Transaction Does Not Exist");
		exit;
	}

	# accept just INVITE requests
	if (!is_method("INVITE")) {
		send_reply(503, "Service Unavailable");
		exit;
	}

        # create the server entity
        b2b_server_new("caller");
        # create the initial client entity, to connect the caller with the callee
        b2b_client_new("callee", $ru);

        # initialize B2B session for the "refer" scenario
        b2b_init_request("refer");

	exit;
}

route[b2b_logic_request] {
	if ($rm != "REFER") {
		# for requests other than REFER, no special actions needs to be done,
		# just pass the request to the peer
		b2b_pass_request();
		exit;
	}

	# end dialog with the referrer
	b2b_send_reply(202, "Accepted");

	# create the client entity corresponding to
	# the user specified in the 'Refer-To' header
	b2b_client_new("referee", $hdr(Refer-To));

	# bridge the referrer's peer with the referee
	b2b_bridge("peer", "referee", ,"notify, no-late-sdp, rollback-failed");
}
