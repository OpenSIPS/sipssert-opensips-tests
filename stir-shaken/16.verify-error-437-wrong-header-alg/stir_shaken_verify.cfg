##########################################################
# Stir and shaken verify for french regulation           #
# Create By Mickael HUBERT https://github.com/mickaelh51 #
##########################################################

route[stir_and_shaken_create_err_code]
{
    xlog("L_INFO", "MAN all identity: $identity(header) / $identity(payload) / $identity(iat) / $identity(attest)\n");

    if ($var(identity_param_count)>4)
    {
        xlog("L_ERR", "MAN $var(identity_param_count) > 4\n");
        xlog("L_ERR", "MAN section 5.5.2.3 -> 438\n");
        $var(stir_shaken_verify_rc) = -4;

    }

    if ($identity(attest) !~ 'A|B|C') 
    {  
        xlog("L_ERR", "MAN attest section 5.5.2.4 -> 438\n");
        $var(stir_shaken_verify_rc) = -4;
    }

    xlog("L_INFO", "MAN <$identity(x5u)> // $var(identity_info)\n");
    $var(new_identity_info) = "<" + $identity(x5u) + ">";
    if ($var(new_identity_info) != $var(identity_info)) 
    {  
        xlog("L_ERR", "MAN section 5.5.2.3 -> 436\n");
        $var(stir_shaken_verify_rc) = -100;
    }
    
    if (!$var(identity_alg) || $var(identity_alg) != "ES256")
    {
        xlog("L_ERR", "MAN issue alg section 5.5.2.3-> 437\n");
        $var(stir_shaken_verify_rc) = -7;
    }

    ########################################
    # Please change ES257 to ES256 in prod #
    ########################################
    # Other method (but official opensips docker image doesn't contain json module)
    #$json(identity_header) := $identity(header);
    #if (!$json(identity_header/alg) || $json(identity_header/alg) != 'ES256') 
    if ($identity(header) !~ 'ES257')
    {
        xlog("L_ERR", "MAN issue alg not ES256 header section 5.5.2.4 -> 436\n");
        $var(stir_shaken_verify_rc) = -7;
    }

    # Other method (but official opensips docker image doesn't contain json module)
    #$json(identity_header) := $identity(header);
    #if (!$json(identity_header/ppt) || $json(identity_header/ppt) != 'passport') 
    if ($identity(header) !~ 'passport')
    {
        xlog("L_ERR", "MAN issue typ not passport header section 5.5.2.4 -> 437\n");
        $var(stir_shaken_verify_rc) = -7;
    }

    if ($identity(header) !~ 'alg' ||Â $identity(header) !~ 'ppt' || $identity(header) !~ 'typ' || $identity(header) !~ 'x5u')
    {
        xlog("L_ERR", "MAN issue no alg or ppt or typ or x5u in token header section 5.5.2.4 -> 436\n");
        $var(stir_shaken_verify_rc) = -100;
    }

    if (!$var(identity_ppt) || $var(identity_ppt) != "shaken")
    {
        xlog("L_ERR", "MAN issue ppt section 5.5.2.3-> 438\n");
        $var(stir_shaken_verify_rc) = -4;
    }
}

route[stir_shaken_verify]
{
    xlog("L_INFO", "MAN $identity\n");

    if ($fU == "anonymous" || $fU == "unavailable") { $var(orig) = $(ai{uri.user}); } else { $var(orig) = $fU; }
    stir_shaken_verify($var(cert), $var(err_code), $var(err_reason), "$var(orig)", "$tU");

    $var(stir_shaken_verify_rc) = $rc;

    if (is_present_hf("Identity"))
    {
        $var(identity_info) = $(hdr(Identity)[0]{param.value,info});
        $var(identity_alg) = $(hdr(Identity)[0]{param.value,alg});
        $var(identity_ppt) = $(hdr(Identity)[0]{param.value,ppt});
        $var(identity_param_count) = $(hdr(Identity)[0]{param.count});
        xlog("L_INFO", "MAN $var(identity_info) / $var(identity_alg) / $var(identity_ppt)\n");

        route(stir_and_shaken_create_err_code);
        remove_hf("Identity");
    }

    if ($var(stir_shaken_verify_rc) < -1) {
        xlog("L_ERR", "verify rc MAN: $var(stir_shaken_verify_rc)\n");
        xlog("L_ERR", "MAN: default err_code=$var(err_code) err_reason=$var(err_reason)\n");


        switch($var(stir_shaken_verify_rc))
        {
            #MAN_Mode_operatoire_Mecanisme_de_Confiance_v1.7_20230616.pdf (page 59)
            case -1:
                # Internal error ==> default 500
                xlog("L_ERR", "Internal error ==> default 500\n");
            break;
            case -2:
                # No Identity or Date header found ==> default 428 Use Identity Header
                #MAN No identity header -> 428 Use Identity Header
                xlog("L_ERR", "No Identity or Date header found ==> default 428 Use Identity Header\n");
                #$var(err_code) = 428;
                #$var(err_reason) = "Use Identity Header";
            break;
            case -3:
                #MAN From and To malformed -> 400 Bad Request ==> default 500 Internal Server Error
                xlog("L_ERR", "-3 default 500, rewrite to 400\n");
                $var(err_code) = 400;
                $var(err_reason) = "Bad Request";
            break;
            case -4:
                # Invalid identity header ==> default 438 invalid Identity Header
                xlog("L_ERR", "Invalid identity header ==> default 438 invalid Identity Header\n");
                $var(err_code) = 438;
                $var(err_reason) = "Invalid Identity Header";
            break;
            case -5:
                # Unsupported 'ppt' or 'alg' Identity header parameter ==> default 438 invalid Identity Header
                xlog("L_ERR", "Unsupported 'ppt' or 'alg' Identity header parameter ==> default 438 invalid Identity Header\n");
            break;
            case -6:
                #MAN Date or iat > 60s -> 403 Stale Date 
                #Date header value is older than local policy for freshness  ==> default 403 Stale Date
                xlog("L_ERR", "MAN Date or iat > 60s -> 403 Stale Date\n");
                #$var(err_code) = 403;
                #$var(err_reason) = "Stale Date";
            break;
            case -7:
                #The Date header value does not fall within the certificate validity  ==> default 403 Stale Date
                xlog("L_ERR", "The Date header value does not fall within the certificate validity  ==> default 403 Stale Date\n");
                $var(err_code) = 437;
                $var(err_reason) = "Unsupported Credential";
            break;
            case -8:
                # Invalid certificate ==> default 437 Unsupported Credential
                xlog("L_ERR", "Invalid certificate ==> default 437 Unsupported Credential\n");
            break;
            case -9:
                # Signature does not verify successfully ==> default 438 invalid Identity Header
                xlog("L_ERR", "Signature does not verify successfully ==> default 438 invalid Identity Header\n");
            break;
            case -100:
                # Add case, beacause sip eoor 436 doen't exist in stir and shaken module
                xlog("L_ERR", "default 436 Bad Identity Info\n");
                $var(err_code) = 436;
                $var(err_reason) = "Bad Identity Info";
            break;
            default:
                xlog("L_ERR", "no case -X, defaut 500\n");
                $var(err_code) = 500;
                $var(err_reason) = "Internal Server Error";
        }

        xlog("MAN: final err_code=$var(err_code) err_reason=$var(err_reason)\n");
        if ($var(kill_calls))
        {
            xlog("MAN: Kill call ! ($var(kill_calls))\n");
            send_reply($var(err_code), $var(err_reason));
            exit;
        }
        else
        {
            xlog("MAN: Not kill call ! ($var(kill_calls)) Add reason header in 200OK\n");
            # add variable into avp to be usable in onreply_route
            $avp(err_code) = $var(err_code);
            $avp(err_reason) = $var(err_reason);
            t_on_reply("reply_stir_shaken");
        }
        
    }
    else
    {
        xlog("L_INFO", "MAN: verification OK\n");
    }
}

onreply_route[reply_stir_shaken]
{
    if(t_check_status("200"))
    {
        #Reason: SIP; cause=436; text="Bad Identity Info"
        append_hf("Reason: SIP; cause=$avp(err_code); text=\"$avp(err_reason)\"\r\n");
    }
}
