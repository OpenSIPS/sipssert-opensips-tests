#
# OpenSIPS residential configuration script
#     by OpenSIPS Solutions <team@opensips-solutions.com>
#
# This script was generated via "make menuconfig", from
#   the "Residential" scenario.
# You can enable / disable more features / functionalities by
#   re-generating the scenario with different options.#
#
# Please refer to the Core CookBook at:
#      https://opensips.org/Resources/DocsCookbooks
# for a explanation of possible statements, functions and parameters.
#


####### Global Parameters #########
######################################################################
/* uncomment the following lines to enable debugging */
#debug_mode=yes

log_level=4
xlog_level=4
log_stderror=yes

udp_workers=4

#socket=udp:0.0.0.0:5060

####### Modules Section ########

#set module path
mpath="/usr/lib/x86_64-linux-gnu/opensips/modules/"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### MySQL module
#loadmodule "db_mysql.so"

#### Dialog module
loadmodule "dialog.so"

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 0)

loadmodule "proto_udp.so"

loadmodule "exec.so"
#modparam("exec", "setvars", 1)

loadmodule "httpd.so"
loadmodule "mi_http.so"

loadmodule "cachedb_local.so"
modparam("cachedb_local", "cachedb_url", "local:group1:///collection1")
modparam("cachedb_local", "cache_collections", "collection1")

loadmodule "db_mysql.so"
modparam("db_mysql", "exec_query_threshold", 60000)

loadmodule "sql_cacher.so"
modparam("sql_cacher", "cache_table",
"id=man_certificates_cache
db_url=mysql://root@192.168.52.2/opensips
cachedb_url=local:group1:///collection1
table=man_certificates_cache
key=x5u
columns=certificate")

#### Stir and Shaken
loadmodule "stir_shaken.so"

include_file "man_private_key.cfg"
include_file "diversion.cfg"

####### Routing Logic ########

# main request routing logic

route {
	# to be sure the private key is loaded
	route(man_private_key);
	

	if (!mf_process_maxfwd_header(10)) {
		send_reply(483,"Too Many Hops");
		exit;
	}

	if (has_totag()) {

		# handle hop-by-hop ACK (no routing required)
		if (is_method("ACK") && t_check_trans()) {
			t_relay();
			exit;
		}

		# sequential request within a dialog should
		# take the path determined by record-routing
		if (!loose_route() && !match_dialog()) {
			# we do record-routing for all our traffic, so we should not
			# receive any sequential requests without Route hdr.
			send_reply(404,"Not here");
			exit;
		}

		# route it out to whatever destination was set by loose_route()
		# in $du (destination URI).
		
		t_relay();
		exit;
	}

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans())
			t_relay();
		exit;
	}

	# accept just INVITE requests
	if (!is_method("INVITE")) {
		send_reply(503, "Service Unavailable");
		exit;
	}
	else
	{
		# Default attestation
		$var(attest) = "A";
		# Choose between PAI or From (French recommendations)
		if ($fU == "anonymous" || $fU == "unavailable") { $var(orig) = $(ai{uri.user}); } else { $var(orig) = $fU; }
		# detect and work about Diversion Header
		route(diversion);
		# Extract public key from cache
		$var(cert) = $sql_cached_value(man_certificates_cache:certificate:https://certs.example.org/public_am.pem);
		# stir_shaken_auth(attest, origid, cert, pkey, x5u, [orig], [dest], [out])
		stir_shaken_auth("$var(attest)","4437c7eb-8f7a-4f0e-a863-f53a0e60251a","$var(cert)","$avp(privKey)",
						"https://certs.example.org/public_am.pem","$var(orig)","$tU","$var(identity_hdr)");

		if ($rc < 0) {
			if ($rc == -1) {
				#-1: Internal error, so we have an issue, send call with bybass header
				xlog("stir_shaken_auth() failed (rc=$rc) force call with P-Identity-Bypass\n");
				# Send a specific token, when the stir and shaken system is down (French recommendations)
				append_hf("P-Identity-Bypass: blablablablabla\r\n");
			}
			else
			{
				#-2: Identity header already exists
				#-3: Failed to derive identity from SIP message because the URI is not a telephone number
				#-4: Date header value is older than local policy for freshness
				#-5: The current time or Date header value does not fall within the certificate validity
				
				xlog("stir_shaken_auth() failed (rc=$rc), call is killed by 500\n");
				send_reply(500, "Server Internal Error");
				exit;
			}
			
		}
		else
		{
			xlog("identity: $var(identity_hdr)\n");
			append_hf("$var(identity_hdr)\r\n");
		}

		
	}

	if (!create_dialog()) {
		send_reply(500, "Internal Server Error");
		exit;
	}
	# Store identity header in dialog to parse it after
	store_dlg_value("identity_cache",$var(identity_hdr));

	record_route();

	if (!t_relay())
		send_reply(500, "Internal Error");
	exit;



	
}
